{
  "accessworksheet.name": "Access a worksheet",
  "activateworksheet.name": "Activate a worksheet",
  "addcustomtablestyle.name": "Add a custom table style",
  "addcustomthemes.name": "Add custom themes",
  "addworksheet.name": "Add a worksheet",
  "applytablestyle.name": "Apply built-in styles to tables",
  "changeworkbooktheme.name": "Change workbook themes",
  "clearsparklinegroup.name": "Clear the sparkline group",
  "clearsparklines.name": "Clear sparklines",
  "configsparklinesettings.name": "Configure sparkline settings",
  "configworksheet.name": "Configure worksheet properties",
  "createnewworkbook.name": "Create new workbook",
  "createsparklines.name": "Create sparklines",
  "createtable.name": "Create a table",
  "customsort.name": "Sort list by custom parameter",
  "deleteworksheet.name": "Delete a worksheet",
  "filtering.name": "Filtering",
  "groupexistsparklines.name": "Group exist sparklines",
  "importexcelfiletoworkbook.name": "Import Excel file",
  "importexcelfilewithpassword.name": "Import Excel file with password",
  "insertdeletetablerowcolumns.name": "Insert or delete table rows and columns",
  "performcalculationsintable.name": "Perform calculations in the table",
  "protectworksheet.name": "Protect worksheet",
  "removetable.name": "Remove table",
  "saveworkbooktoexcelfile.name": "Save to Excel file",
  "saveworkbookwithpassword.name": "Save to Excel file with password",
  "sorting.name": "Sorting",
  "sortrangebyfontcolor.name": "Sort by font color",
  "sortrangebyicon.name": "Sort by icon",
  "sortrangebyinterior.name": "Sort range by content",
  "sortrangebyvalue.name": "Sort range by value",
  "sparklines.name": "Sparklines",
  "tablefilter.name": "Filter table range",
  "tables.name": "Tables",
  "tablesort.name": "Sort table range",
  "textfilter.name": "Apply text filter",
  "theme.name": "Theme",
  "unprotectworksheet.name": "Unprotect worksheet",
  "usedateaxis.name": "Use date axis",
  "valuefilter.descrip": "Create value filter",
  "valuefilter.name": "Value Filter",
  "workbook.name": "Workbook",
  "worksheets.name": "Worksheets",
  "addslicersfortable.name": "Add slicers to tables",
  "slicer.name": "Slicer",
  "addslicersforpivottable.name": "Add slicers to pivot tables",
  "dotablefilter.name": "Auto-filter table with slicer",
  "applyslicerstyle.name": "Apply built-in style to slicer",
  "useslicerdofilter.name": "Use slicer to filter table",
  "configslicerlayout.name": "Configure slicer layout",
  "createconnectorshape.name": "Create connector shape",
  "shape.name": "Shape",
  "connectshapesbyconnector.name": "Connect shapes with connector shape",
  "configshapewithpicturefill.name": "Set shape's picture fill",
  "configshapewithgradientfill.name": "Set shape's gradient fill",
  "configshapewithpatternfill.name": "Set shape's pattern fill",
  "configshapewithtexturefill.name": "Set shape's texture fill",
  "configshapewithsolidfill.name": "Set shape's solid fill",
  "configshapeline.name": "Set shape's line format",
  "configshape3dformat.name": "Set shape's 3D format",
  "setshapetext.name": "Set shape's text",
  "createpicture.name": "Create picture",
  "deletepicture.name": "Delete picture",
  "mergecells.name": "Merge cells",
  "rangeoperations.name": "Range Operations",
  "accesseachareaofrange.name": "Access areas in a range",
  "getrangerowcountcolumncount.name": "Get row and column count",
  "accesscellsrowscolumns.name": "Access cells, rows and columns in a range",
  "getworksheetusedrange.name": "Get used range",
  "setrowheightcolumnwidth.name": "Set row height and column width",
  "accessrange.name": "Access a range",
  "insertcellsdeletecells.name": "Insert or delete cells",
  "insertdeleterowscolumns.name": "Insert or delete rows and columns",
  "cutcopyrange.name": "Cut or copy ranges",
  "getfeaturerelatedusedrange.name": "Get used range features",
  "pivottable.name": "Pivot Table",
  "createpivottable.name": "Create pivot tables",
  "changedatafieldsummarizefunction.name": "Set field's summarize function",
  "modifysubtotalsforpivotfield.name": "Modify pivot field subtotal type",
  "filteritemsinpivottable.name": "Filter items in pivot tables",
  "refreshpivottable.name": "Refresh pivot table",
  "deletehyperlinks.name": "Delete hyperlinks",
  "createrangegroup.name": "Create range group",
  "ungrouprange.name": "Ungroup range",
  "clearoutline.name": "Clear outline",
  "showspecificlevel.name": "Show specific level group",
  "addcustomname.name": "Add custom names",
  "grouping.name": "Grouping",
  "hyperlinks.name": "Hyperlinks",
  "picture.name": "Picture",
  "configworkbookreferencestyle.name": "Set workbook's reference style",
  "formulas.name": "Formulas",
  "usearrayformula.name": "Use array formulas",
  "usetableformula.name": "Use table formulas",
  "dirtyandcalculation.name": "Dirty and Calculate methods",
  "setrangevalue.name": "Set values to a range",
  "tojsonfromjson.name": "ToJson and FromJson",
  "customnumberformat.name": "Set custom number format",
  "dateandtimeformat.name": "Set date and time format",
  "formatting.name": "Formatting",
  "numberformats.name": "Set number format",
  "halignvalign.name": "Set horizontal and vertical alignment",
  "shrinktofit.name": "Shrink to fit",
  "rotatecellcontents.name": "Rotate cell contents",
  "wraptext.name": "Wrap text",
  "addborderstocell.name": "Add borders to cell",
  "addingborderstorange.name": "Add borders to range",
  "fontcolor.name": "Set font color",
  "fonteffect.name": "Set font effect",
  "fontname.name": "Set font name",
  "fontsize.name": "Set font size",
  "fontstyle.name": "Set font style",
  "fontunderline.name": "Set font underline",
  "lineargradientfill.name": "Set linear gradient fill",
  "patternfill.name": "Set pattern fill",
  "rectangulargradientfill.name": "Set rectangular gradient fill",
  "solidfill.name": "Set solid fill",
  "textorientation.name": "Set text orientation",
  "alignment.name": "Alignment",
  "applystyle.name": "Apply style to range",
  "borders.name": "Borders",
  "createcustomstyle.name": "Create custom style",
  "fill.name": "Fill",
  "fonts.name": "Fonts",
  "getdisplayformat.name": "Get display format",
  "protection.name": "Protection",
  "setrangeformulahidden.name": "Hide formula",
  "setrangelocked.name": "Lock range",
  "addcomment.name": "Add comment to cell",
  "clearcomment.name": "Clear comments",
  "comments.name": "Comments",
  "configcommentlayout.name": "Configure comment's layout",
  "setrichtextforcomment.name": "Set rich text for comment",
  "conditionalformatting.name": "Conditional Formatting",
  "createaveragerule.name": "Create average rule",
  "createcellvaluerule.name": "Create cell value rule",
  "createdatabbarrule.name": "Create data bar rule",
  "createexpressionrule.name": "Create expression rule",
  "createiconsetrule.name": "Create icon set rule",
  "createmultiruleforrange.name": "Create multiple rules for a range",
  "createthreecolorscalerule.name": "Create three color scale rule",
  "createtopbottomrule.name": "Create top bottom rule",
  "createtwocolorscalerule.name": "Create two color scale rule",
  "createuniquerule.name": "Create unique rule",
  "deleteconditionalformatrules.name": "Delete conditional format rules",
  "rootexample.descrip": "GcExcel - Java Features",
  "rootexample.name": "All",
  "createcustomvalidation.name": "Create custom validation",
  "createdatevalidation.name": "Create date validation",
  "createdecimalvalidation.name": "Create decimal validation",
  "createlistvalidation.name": "Create list validation",
  "createtextlength.name": "Create text length validation",
  "createtimevalidation.name": "Create time validation",
  "createwholenumbervalidation.name": "Create whole number validation",
  "datavalidation.name": "Data Validation",
  "deletevalidation.name": "Delete validation",
  "modifyvalidation.name": "Modify validation",
  "addseries.name": "Add series for chart",
  "charts.name": "Charts",
  "configbubblechartlayout.name": "Configure bubble chart's layout",
  "configdatalabeltext.name": "Configure data label's text",
  "configdatapointformat.name": "Configure data point's format",
  "createchart.name": "Create chart",
  "createdropline.name": "Create drop line",
  "createhiloline.name": "Create high-low line",
  "createtrendline.name": "Create trend line",
  "deletechart.name": "Delete chart",
  "series.name": "Series",
  "setvarycolorforcolumnchart.name": "Set column chart colors to vary",
  "createconnectorline.name": "Create connector line for pie of pie chart",
  "createseriesline.name": "Create series line for column chart",
  "extendseries.name": "Add new points for existing series",
  "createupdownbars.name": "Create up down bars for line chart",
  "accesstableranges.name": "Access each table range",
  "axes.name": "Axis",
  "configcategoryaxesformat.name": "Configure category axis style",
  "configaxistitle.name": "Configure axis title style",
  "configcategoryaxisunits.name": "Set data axis units",
  "configdisplayunitlabel.name": "Configure display unit label style",
  "configgridlines.name": "Configure gridline style",
  "configtickmarklabel.name": "Set tick mark label style",
  "configvalueaxisunits.name": "Set value axis units",
  "setaxisscaletype.name": "Set value axis scale type",
  "setaxistickmark.name": "Configure axis tick mark layout",
  "chartjustplotvisiblecell.name": "Plot only visible cells",
  "configchartareaformat.name": "Configure chart area format",
  "configchartfloorstyle.name": "Configure chart floor style",
  "configcharttitlestyle.name": "Configure chart title style",
  "configchartwallstyle.name": "Configure chart walls style",
  "configlegendentryfontstyle.name": "Configure legend entry font style",
  "configlegendpositionandlayout.name": "Configure legend position and layout",
  "configplotareaformat.name": "Configure plot area format",
  "bloodpressuretracker.name": "Blood pressure tracker",
  "usecases.name": "Use Cases",
  "todolistwithprogresstracker.name": "To do list with progress tracker",
  "costanalysiswithparetochart.name": "Cost analysis with Pareto chart",
  "datedynamicfilter.name": "Filter date dynamically",
  "bidtracker.name": "Bid tracker",
  "personaladdressbook.name": "Personal address book",
  "customerprofitabilityanalysis.name": "Customer profitability analysis",
  "datefiltering.name": "Date Filter",
  "filteringbycolor.name": "Filter by color",
  "filteringbyicon.name": "Filter by icon",
  "numberfiltering.name": "Number Filter",
  "textfiltering.name": "Text Filter",
  "changeworksheetfilterrange.name": "Change worksheet filter range",
  "clearfilter.name": "Clear worksheet filter",
  "datefilter.name": "Apply date filter",
  "filterbynofill.name": "Filter by no fill",
  "filterbyautomaticfontcolor.name": "Filter by automatic font color",
  "filterbycellcolor.name": "Filter by cell color",
  "filterbyfontcolor.name": "Filter by font color",
  "filterbyicon.name": "Filter by icon",
  "filterbynoicon.name": "Filter by no icon",
  "multiselectfilter.name": "Apply multiple value filter",
  "reapplyfilter.name": "Reapply filter",
  "features.name": "Features",
  "samples.name": "Samples",
  "movielist.name": "Movie list",
  "simpleinvoice.name": "Simple invoice",
  "createhyperlinks.name": "Create hyperlinks",
  "basicsalesreport.name": "Basic sales report",
  "axes.descrip": "## Axis\nCharts contain three axis types: \n- category axis\n- value axis\n- series axis\n\nThey are all generated automatically, and you **can not add or delete them in code**.\n\nExamples in the Axis folder demonstrate how to specify axis-related settings such as:\n- axis titles\n- axis units\n- display unit labels\n- gridlines\n- tick marks\n- tick mark labels",
  "charts.descrip": "## Charts\n**GcExcel - Java** provides a comprehensive charting API:\n\n- Add charts to a worksheet using the **IWorksheet.getShapes().addChart** method\n-- Returns an instance of **IShape** \n-- Use the **getChart** method to access the newly added chart\n- Add data series with the **IChart.getSeriesCollection().add** method\n- Cutomize chart titles with the **IChart.getChartTitle** method\n- Cutomize chart legends with the **IChart.getLegend** method\n- Access and customize each data series through the **ISeries** interface\n- Customize each data point in a data series using the **IPoint** interface\n- Add, remove, or customize each data label in a series using the **IDataLabel** interface\n- Access and customize a group of series through the **IChartGroup** interface\n- Access and customize value axes, category axes, and series axes using the **IAxis** interface\n\nOver and above the basic usage of each chart feature, you can call the **ISeries.setChartType** to create combination charts. You can even specify whether to plot a series on the primary or secondary axis with the **ISeries.getAxisGroup** property.\n\nEach series in a chart is associated with a chart group. Typically there is one chart group for each chart type. Multiple chart groups are created automatically when you use combination charts. \n\nThe **IChartGroup** interface provides options that let you customize the appearance of every series in a group. For example, you can set these properties on certain chart types:\n\n- **StartAngle** for pie charts\n- **GapWidth** for bar or column charts\n- **HasHiLoLines** and **HasUpDownBars** shows or hides stock chart options on a line chart\n\nThe **IAxis** interface provides options that let you customize the appearance of chart axes. For example, you can these properties on certain axis types:\n\n- **MinimumScale** and **MaximumScale** for a value axis\n- **TickLabelSpacing** for a category axis\n- **HasMajorGridlines** and **HasMinorGridlines** for a value axis\n\nMany chart objects (chart area, plot area, chart title, legend, series) provide a **Format** property so you can access and modify:\n\n- **fills** solid or gradient \n- **lines** dashed or transparency",
  "series.descrip": "## Series\n**Series** is the most frequently used feature in charts. Each chart contains one or more data series, and each series consists of a group of data points. \n\nThese examples demonstrate how to add a series to a chart, and how to specify settings for each series, such as:\n\n- **BubbleScale** and **SizeRepresents** for bubble charts\n- Configure **Series** format\n- Change **Series Type**\n- Add **Secondary Axis**\n- **VaryByCategories** colors for single-series column charts",
  "personalnetworthcalculator.name": "Personal net worth calculator",
  "comments.descrip": "## Comments\nGcExcel - Java enables users to annotate worksheets. They can write comments for cells to add information about the data it contains.\n\nAdd comments for a range using the **addComment** method. It returns an instance of the **IComment** interface. \n\nAlways show comments with the **setVisible** method. \n\nModify comment layouts with the **getShape** method.\n\nCreate rich text using the **getTextFrame** method of the **IShape** interface. You can use different font styles for each run.",
  "spreadsheetsviewer.name": "Spread.Sheets Viewer",
  "usecases.descrip": "Two more GcExcel - Java usage scenarios are as follows:\n- **Code** Use GcExcel - Java API code, then export to an Excel file.\n- **Templates** Import an Excel template to the GcExcel - Java data model, then use GcExcel - Java API code to add content, then export it to an Excel file.",
  "excelreporting.name": "Excel Reporting",
  "exceltemplates.name": "Excel Templates",
  "hiddenrowcolumn.name": "Hide rows and columns",
  "homeinventory.name": "Home inventory",
  "collapsegroup.name": "Collapse group",
  "simplepersonalbudget.name": "Simple personal budget",
  "studentcalendar.name": "Student calendar",
  "travelexpensereport.name": "Travel expense report",
  "conditionalformatting.descrip": "## Conditional Formatting\nIn order to enable you to highlight important information in rows or columns of a worksheet, GcExcel - Java allows users to create conditional formatting rules for individual cells or a range of cells based on cell values. If the format condition matches with the cell value, it is assumed as true and the cell is formatted as per the specified rule..\n\nGcExcel - Java supports all types of conditional formatting rules:\n\n- Cell Value\n- Average\n- Color Scale\n- Data Bar\n- Icon Sets\n- Top Bottom \n- Unique\n- Expression\n\nApply conditional formatting rules to a range using the **add** method of **IRange.getFormatConditions**. You can also use other specific add methods:\n\n- addAboveAverage\n- addColorScale\n- addDatabar\n- addIconSetCondition\n- addTop10\n- addUniqueValues\n\nAll of the Add functions return an instance of the **IFormatCondition** interface, or an interface specific to another Add method, such as **IAboveAverage**.",
  "datavalidation.descrip": "## Data Validation\nGcExcel - Java lets you validate data by restricting the information format and the values that can be entered in cells of a worksheet. You can create distinct validation scenarios for individual cells or for a range of cells.\n\nGcExcel - Java supports all types of validations, including:\n- Whole Number\n- Decimal\n- List\n- Date\n- Time\n- Text length\n- Custom\n\nAdd validation for a range using the **add** method of  **IRange.getValidation** method. The method returns an instance of the **IValidation** interface. \n- To set input and error messages for the validation, use these properties:\n-- InputMessage \n-- ErrorMessage \n- To specify whether to show the messages, use these properties:\n-- ShowInputMessage \n-- ShowError\n- To specify whether to show a drop down list in a list validation:\n-- InCellDropdown property",
  "monthlybusinessbudget.name": "Monthly business budget",
  "filtering.descrip": "## Filtering\nGcExcel - Java supports all types of filters, including: \n- Number Filter\n- Text Filter\n- Date Filter\n- Color Filter\n- Icon Filter\n\nFilter a range using the range's **AutoFilter** method. If you want to apply the filter to multiple columns, you can invoke the AutoFilter method several times.\n\nTo re-apply filter conditions when the range's value changes, use the **applyFilter** method of the IWorksheet.getAutoFilter.",
  "filteringbycolor.descrip": "## Filter by color\nThe examples in this folder demonstrate how to use the autoFilter method to create a color filter. You can filter by:\n- font color\n- interior color\n- automatic font color\n- no fill",
  "filteringbyicon.descrip": "## Filter by icon\nThe examples in this folder demonstrate how to use the autoFilter method to filter by icon.  You can set the **AutoFilterOperator** parameter to: \n\n- **Icon** and filter by the specified icon\n- **NoIcon** and filter by rows with no icon\n\nBefore you can apply an icon filter, you must first create an **IIconSetCondition** instance and an **IFormatCondition** instance for the Range.",
  "simplebudget.name": "Simple Budget",
  "textfiltering.descrip": "## Text Filter\nThe example in this folder demonstrates how to use the autoFilter method to create a text filter. For example, you can filter by rows that contain the letter \"e\".",
  "alignment.descrip": "## Alignment\nThe examples in this folder demonstrate how to use these alignment settings:\n- HorizontalAlignment (Left, Center, or Right)\n- VerticalAlignment (Top, Center, or Bottom)\n- ReadingOrder (sets text direction to RightToLeft or LeftToRight)\n- ShrinkToFit \n- Orientation (sets the text rotation angle in degrees)\n- Wrap Text ",
  "borders.descrip": "## Borders\nThe examples in this folder demonstrate how to specify border settings for a range. You can set these border options:\n- BorderLineStyle (Dashed, DashDot, Dotted, Double, Medium, Hair, etc.)\n- Color (Green, Red, Blue, Tomato, LimeGreen, etc.)",
  "datefiltering.descrip": "## Date Filter\nThe examples in this folder demonstrate how to use the autoFilter method to filter by date. They show how you can filter:\n- between two dates\n- all dates in February",
  "fill.descrip": "## Fill\nThe examples in this folder demonstrate how to apply several kinds of fill to a range.\n- Solid fill\n- Pattern fill\n- Linear gradient fill\n- Rectangular gradient fill",
  "fonts.descrip": "## Fonts\nThe examples in this folder demonstrate how to apply font settings to a range:\n- Font color\n- Font size\n- Font name\n- Bold, Italic\n- Underline\n- Strikethrough, Superscript, Subscript",
  "formatting.descrip": "## Formatting\nGcExcel - Java provides a lot of properties to customize the appearance of a range:\n\n- **IRange.setNumberFormat** sets the number format\n- **IRange.setHorizontalAlignment**,  **IRange.setVerticalAlignment**, **IRange.setIndentLevel**, etc. set the alignment\n- **IRange.getFont** config the font\n- **IRange.getBorders** config the border\n- **IRange.getInterior** sets solid fill, pattern fill, and gradient fill\n- **IRange.setLocked** and **IRange.setFormulaHidden** sets up protection\n\nYou can also create custom styles or use the built-in named styles, and apply named styles to one or more ranges.",
  "formulas.descrip": "## Formulas\nGcExcel - Java lets you create and use formulas. These are expressions that let you calculate the value of a cell quickly and accurately. You can also use built-in functions and operators to generate formulas and calculate values in cells.\n\nThe calc engine handles many calculations, for example:\n- Hundreds of built-in Excel functions\n- Array formulas\n- Dirty and Calculate methods\n- Table formula",
  "grouping.descrip": "## Grouping\nSpreadsheets with tons of data can be a headache to read. You can spend a lot of time and effort trying to visualize, manage, and analyze the information that is relevant to you.\n\nGcExcel - Java lets you summarize large amounts of information in groups so that complex spreadsheets are easier to navigate. After rows of data in a spreadsheet are grouped, users can expand and collapse details with the click of a button in the group header row. You can use the following methods and properties to customize your groupings:\n\n- The **group** method of the range increases the outline level of specific rows\n- The **ungroup** method of the range decreases the outline level of specific rows\n- With the **setShowDetail** method, can expand or collapse a group\n- The **showLevels** method of the worksheet's Outline instance expands specific level groups",
  "numberformat.descrip": "## Number Format\nThe Number Format examples demonstrate how to apply a number format to a range. GcExcel - Java uses Excel-style number formats.",
  "protection.descrip": "## Protection \nThe Protection examples demonstrate how to apply security settings to a range, for example:\n- The **FormulaHidden** property keeps formulas in a range from appearing in exported .xlsx files.\n- The **Locked** property protects cells in a range from being modified",
  "addcustomslicerstyle.name": "Add a custom slicer style",
  "bloodsugartracker.name": "Blood sugar tracker",
  "tutorial.name": "Tutorial",
  "hyperlinks.descrip": "## Hyperlinks\nApply hyperlinks to a range using the **add** method of a worksheet or range's **Hyperlinks** instance. GcExcel - Java supports the following types of hyperlink:\n- Link to a web page\n- Link to a specific range in the current document\n- Link to an external file\n- Link to an email address",
  "picture.descrip": "## Picture\nGcExcel - Java allows you to add a picture to a worksheet.\n\nTo add a picture to a worksheet, use the **addPicture** method of the worksheet's **Shapes** collection.",
  "pivottable.descrip": "## Pivot Table\nA pivot table is a data summarization tool. It can automatically count, total, or average the data stored in a spreadsheet, and display the resulting summarized data in a second table.\n\nCreate a pivot cache using the **create** method of the workbook's **PivotCaches** collection. It returns an instance of the **IPivotCache** interface. \n\nCreate a pivot table using the **createPivotTable** method of the pivot cache instance. Or you can opt to use the **add** method of the worksheet's **PivotTables** collection.\n\nUse the **PivotFieldOrientation** property of each pivot field to specify whether it is a RowField, ColumnField, ValueField, or PageField.",
  "rangeoperations.descrip": "## Range Operations\nA range is a cell or a cluster of cells in a spreadsheet that can be used to execute important operations on cells, rows or columns with the help of IWorksheet.getRange method.\n\nExamples in this folder demonstrate how to:\n- Access cells, rows, and columns\n- Access each area of a range\n- Access ranges in various ways\n- Cut, Copy, and Paste a range\n- Work with a used range of cells\n- Get a row count or column count\n- Hide a row or column\n- Insert or delete cells\n- Insert or delete rows and columns\n- Merge cells\n- Set values to a range\n- Set row height and column width",  "shape.descrip": "## Shape\nGcExcel - Java lets you embed drawing objects like shapes and pictures in the cells of a worksheet. You can insert arrows, lines, charts, slicers, pictures, and general shapes.\n\nTo create a shape for a worksheet, use the **addShape** method of the worksheet's Shapes collection. Then you can configure the Shape instance using methods like these:\n\n- Configure a shape's fill style using the **getFill** method \n- Configure a shape's line style using the **getLine** method\n- Configure a shape's 3D format using the **getThreeD** method \n- Configure a shape's rich text using the **getTextFrame** method",
  "slicer.descrip": "## Slicer\nSlicers are visual filters that you can use to filter a table or pivot table.\n\nUse the **add** method of a workbook's **SlicerCaches** collection to create a slicer cache. It returns an instance of a slicer cache. \n\nUse the **add** method of the slicer cashe's **Slicers** collection to create a slicer.\n\nIt supports both built-in and custom slicer styles.",
  "sorting.descrip": "## Sorting\nGcExcel - Java supports all types of sorting, including:\n- Sort by value\n- Sort by font color\n- Sort by interior\n- Sort by icon\n- Sort by custom list",
  "sparklines.descrip": "## Sparklines\nGcExcel - Java allows you to highlight specific information and see how it varies over time using Sparklines. Sparklines are small, lightweight charts that are drawn inside cells to quickly visualize data for improved analysis.\n\nUse the **add** method of a range's **SparklineGroups** collection to create a group of new sparklines. Sparklines only exist inside of a sparkline group. There is no way to create a sparkline outside of a sparkline group.\n\nWe support the following types of sparklines:\n- Line\n- Column\n- Win/Loss",
  "spreadsheetsviewer.descrip": "## Spread.Sheets Viewer\nExamples in this folder demonstrate how to use **GcExcel - Java** and **Spread.Sheets**, another Spread product that is included in SpreadJS. GcExcel - Java works on the server side to import and export Excel template files. Spread.Sheets works in the browser (client side) as a viewer or editor.\n\nTo learn more about **Spread.Sheets**, visit the [Spread.Sheets Home Page](https://www.grapecity.com/en/spreadsheets).\n\nAll examples in this folder work as below steps:\n- Open an Excel file with **GcExcel - Java** existing on server.\n- Export the whole workbook to a JSON string by calling **Workbook.toJson**, then transfer the JSON string to client side.\n- At client side, **Spread.Sheets** control will **fromJson** to let you view the result of the excel file on server.\n\nClick the **\"Template\"** button to download and view the excel file.\n\nIn the demo page, you can edit the content in the Spread.Sheets control, then click the **\"Export\"** button to get the changed Excel file. The \"Export\" button works by following steps:\n- Spread.Sheets uses **ToJson** to get a JSON string which contains the latest changes, and post the string to server.\n- GcExcel - Java at server uses **fromJson** with the JSON string, and then calls **Workbook.save** to save everything to an excel file.\n- Finally, you can download the changed Excel file.",
  "tables.descrip": "## Tables\nTo more easily manage and analyze data in spreadsheet, you can create table for a range. A table consists of rows and columns that you can format and manage independently in a worksheet. You will learn how to:\n\n- Add or remove a table in a worksheet\n- Apply filtering to a table column\n- Apply sorting to a table column\n- Apply either built-in or custom table styles\n- Access each range of a table\n- Add or remove a table column\n- Perform calculations for a specific table range",
  "theme.descrip": "## Theme\nGcExcel - Java provides you with a set of built-in themes so you can quickly change the overall appearance of a workbook. It also lets you create custom themes and apply them to workbooks.\n\n- Use the **setTheme** method of a workbook instance to change the workbook's theme. \n- Use the **add** method of a themes class instance to add a custom theme. \n- Use the built-in properties of the **Themes** class to get a built-in theme instance.\n- Use the **Themes** indexer to get a custom theme instance.",
  "workbook.descrip": "## Workbook\nA workbook is a spreadsheet document that contains one or more worksheets that are stored within the Worksheets collection.\n\nThe examples in this folder demonstrate the following cases:\n- Create  a new workbook\n- Import an Excel file into a workbook\n- Import an Excel file with a password to a workbook\n- Export a workbook to an Excel file\n- Export a workbook to an Excel file with a password\n- Import or export a workbook using ToJson and FromJson",
  "worksheets.descrip": "## Worksheets\nThe examples in this folder demonstrate the following cases:\n- Add a worksheet\n- Delete a worksheet\n- Protect a worksheet\n- Unprotect a worksheet\n- Activate a worksheet\n- Apply settings to a worksheet",
  "excelreporting.descrip": "## Excel Reporting\nIn this folder, you can explore complete code demonstrating how to generate an Excel file or report at server side. \n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of code in the code window\n- Save to an Excel file\n\nThen you can view the results by downloading the Excel file.",
  "exceltemplates.descrip": "## Excel Templates\nIn some scenarios, you may have your own Excel templates and just want to open and update some of the contents at server side. You can use the extensive GcExcel - Java API to open an existing Excel file and then change some of its values, customize its formatting, and whatever else you need to do.\n- Click the **Template** button to download and view the original Excel template\n- Click the **Run** button to run the code and get the changed Excel file",
  "useslicertoclearfilter.name": "Use a slicer to clear a filter",
  "features.descrip": "## Features\nGcExcel - Java provides some remarkable features that empower developers to create spreadsheets with:\n- High-performance attributes\n- Custom themes\n- Configurable components\n- Summarized data\n- Custom styles\n- Embedded drawing objects\n- Integrated calculation engine\n- And much more...\n\nYou can explore a lot of example code in the Features section that shows you how to use each feature in GcExcel - Java.\n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of the code in the code window\n- Save to an Excel file\n\nThen you can view the results by downloading the Excel file.\n\n**NOTE**: In this demo, Spread.Sheets is in read-only mode. Don't be alarmed if some features are not interactive. Download the fully functional  Excel file to interact with the features.",
  "projectcosttracker.name": "Project cost tracker",
  "eventbudget.name": "Event budget",
  "numberfilter.name": "Apply number filter",
  "numberfiltering.descrip": "## Number Filter\nThe examples in this folder demonstrates how to use number filtering for range.",
  "numberformat.name": "Number Format",
  "configvalueaxesformat.name": "Configure value axis style",
  "changeseriestype.name": "Change series type",
  "configdatalabelformat.name": "Configure data label's format",
  "configmarkerstyle.name": "Configure markers style",
  "confignegativepoint.name": "Configure negative point style",
  "configseriesformat.name": "Configure series format",
  "createsecondaryaxis.name": "Create secondary axis",
  "deleteseries.name": "Delete series",
  "configcharttitlerichtext.name": "Configure chart title with rich text",
  "chartarea.name": "Chart area",
  "chartlines.name": "Chart lines",
  "charttitle.name": "Chart title",
  "chartwalls.name": "Chart walls",
  "configchartareafont.name": "Configure chart area's font",
  "configchartbackwall.name": "Configure chart back wall",
  "configchartsidewall.name": "Configure chart side wall",
  "datalabel.name": "Data label",
  "datapoint.name": "Data point",
  "legend.name": "Legend",
  "chartarea.descrip": "## Chart area\nChart area is the complete chart area, include plot area, chart title and legend.\n\nThese examples demonstrate how to configure chart area style and whole chart area font style.",
  "chartlines.descrip": "## Chart lines\nChart lines include: **Trendline**, **Dropline** , **High-Low Line** and **Series Line**.\n\n- **Trendline** is for specific series.\n- **Dropline** set for line chart or area chart.\n- **High-Low line** set for line chart.\n- **Series line** set for stacked column or bar charts. Pie-of-pie charts and bar-of-pie charts also have connector lines between their sections\n\nThese examples demonstrate how to add these lines and how to configure lines style.",
  "charttitle.descrip": "## Chart title\n**Chart title** is the name of the chart.\n\nThese examples demonstrate how to display chart name  and how to specify settings for chart title.",
  "chartwalls.descrip": "**Chart walls** include **back wall** and **side wall**.\n\nThese examaple demonstrete how to specity settings for chart walls, include:\n- Configure walls style together\n- Configure back wall and side wall separately",
  "chart3dformat.name": "Chart 3D format",
  "configlegendformat.name": "Configure legend format",
  "configsecondarysection.name": "Configure secondary section for pie of pie chart",
  "datalabel.descrip": "## Data label\n**Data labels** can display specified series information. Use setShowLegendKey, setShowPercentage, setShowValue, setShowSeriesName, .etc to configure data label layout. These examples demonstrate how to display data labels and specify settings for data labels.",
  "datapoint.descrip": "## Data point\n**Data points** are a collection of all points in a specific series. These examples demonstrate how to specify settings for data points.",
  "legend.descrip": "## Legend\nThese examples demonstrate how to configure the style and position of chart **legends**.",
  "plotarea.descrip": "## Plot area\nThese examples demonstrate how to specify settings for **plot area**.",
  "plotarea.name": "Plot area",
  "chartgallery.descrip": "## Chart gallery\nThis chart gallery includes all of the **chart types** available and demonstrates how to configure each chart.",
  "chartgallery.name": "Chart gallery",
  "areachart.name": "Area chart",
  "areastacked100.name": "100% Stacked chart",
  "areastackedchart.name": "Stacked Area chart",
  "barclusteredchart.name": "Clustered Bar chart",
  "barstacked100chart.name": "100% Stacked Bar chart",
  "barstackedchart.name": "Stacked Bar chart",
  "columnclusteredchart.name": "Clustered Column chart",
  "columnstacked100chart.name": "100% Stacked Column chart",
  "columnstackedchart.name": "Stacked Column chart",
  "linechart.name": "Line chart",
  "linemarkerschart.name": "Line Markers chart",
  "linestacked100chart.name": "100% Stacked Line chart",
  "linestackedchart.name": "Stacked Line chart",
  "piechart.name": "Pie chart",
  "stock_highlowclosestockchart.name": "High-Low-Close stock chart",
  "stock_openhighlowclosestock.name": "Open-High-Low-Close stock chart",
  "stock_volumehighlowclosestock.name": "Volume-High-Low-Close stock chart",
  "xyscatterchart.name": "Scatter chart",
  "xyscatterlineschart.name": "Scatter with straight lines and markers",
  "xyscattersmooth.name": "Scatter with smooth Lines",
  "bubblechart.name": "Bubble chart",
  "configheaderfooter.name": "Configure page header footer",
  "configevenpageheaderfooter.name": "Configure even page header footer",
  "configfirstpagenumber.name": "Configure first page number",
  "configpagemargins.name": "Configure page margins",
  "configpageorder.name": "Configure page order",
  "configpageorientation.name": "Configure page orientation",
  "configpaperscaling.name": "Configure paper scaling",
  "configpapersize.name": "Configure paper size",
  "configprintarea.name": "Configure print area",
  "configsheetprintsettings.name": "Configure sheet print settings",
  "pagesetup.name": "Page Setup",
  "combinationchart1.name": "Combination chart",
  "combinationchart2.name": "Combination chart",
  "linemarkerstackedchart.name": "Stack line with markers chart",
  "pie_doughnutchart.name": "Doughnut chart",
  "stock_volumeopenhighlowclose.name": "Volume-Open-High-Low-Close chart",
  "xyscattersmoothwithmarkers.name": "Scatter with smooth lines and markers",
  "linemarkerstacked100chart.name": "100% Stacked line with markers chart",
  "chart3dformat.descrip": "## Chart 3D format\nThese examples in this folder demonstrate how to set charts 3D format",
  "configmarkersformat.name": "Configure markers format",
  "markers.descrip": "## Markers\nThese examples demonstrate how to set style and format for **markers**.",
  "markers.name": "Markers",
  "pagesetup.descrip": "## Page Setup\nGcExcel - Java supports page setup. The **PageSetup** object contains all page setup attributes (left margin, bottom margin, paper size, and so on) as properties.",
  "configchart3dformat.name": "Configure chart 3D format",
  "configfirstpageheaderfooter.name": "Configure first page header footer",
  "eventplanningtracker.name": "Event planning tracker",
  "familybudget.name": "Family budget",
  "configprinttitlecolumns.name": "Configure columns to repeat at left",
  "configprinttitlerows.name": "Configure rows to repeat at top",
  "configpagecenter.name": "Configure page center",
  "importexcelfiledataonly.name": "Only import data from Excel",
  "importexcelfilewithoutcalculation.name": "Do not recalculate after opening Excel",
  "pdfexporting.descrip": "## PDF Exporting\nIn this folder, you can explore complete code demonstrating how to export an pdf file at server side. \n\nClick the **\"Save as PDF\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of code in the code window\n- Save to an pdf file\n\nThen you can view the pdf in your browser.",
  "pdfexporting.name": "PDF Exporting",
  "saveworkbooktopdf.name": "Save workbook to PDF",
  "saveworksheettopdf.name": "Save worksheet to PDF",
  "configurepagesetup.name": "Page settings",
  "setfontsfolderpath.name": "Set font's folder",
  "shapecopy.name": "Copy shape",
  "shapecut.name": "Cut shape",
  "shapeduplicate.name": "Duplicate shape",
  "chartcopy.name": "Copy chart",
  "chartcut.name": "Cut chart",
  "chartduplicate.name": "Duplicate chart",
  "picturecopy.name": "Copy picture",
  "picturecut.name": "Cut picture",
  "pictureduplicate.name": "Duplicate picture",
  "slicercopy.name": "Copy slicer",
  "slicercut.name": "Cut slicer",
  "slicerduplicate.name": "Duplicate slicer",
  "importcsvfiletoworkbook.name": "Import csv file to workbook",
  "importcsvfiletoworkbookwithoptions.name": "Import csv file to workbook with options",
  "saveworksheettocsvfile.name": "Save worksheet to csv file",
  "saveworkbooktocsvfile.name": "Save workbook to csv file",
  "saveworkbooktocsvfilewithoptions.name": "Save workbook to csv file with options",
  "saveworksheettocsvfilewithoptions.name": "Save worksheet to csv file with options",
  "configureworkbookview.name": "Configure workbook view",
  "configureworksheetview.name": "Configure worksheet view",
  "text.name": "Export text",
  "savesparklinestopdf.name": "Export sparklines",
  "textstyle.name": "Export font effects",
  "saverangefilltopdf.name": "Export fills",
  "savepicturetopdf.name": "Export picture",
  "numberformating.name": "Export number formats",
  "overflow.name": "Export overflow text",
  "configureblackandwhite.name": "Black & white",
  "configuredraft.name": "Draft",
  "configureheaderfooter.name": "Header footer",
  "configureoritation.name": "Orientation",
  "configurepagebreaks.name": "Page breaks",
  "configurepageorder.name": "Page order",
  "configurepagination.name": "Pagination",
  "configureprintarea.name": "Print area",
  "configureprintpagerange.name": "Print page range",
  "configureprinttitles.name": "Print titles",
  "configurescaling.name": "Scaling",
  "pdfpagesetup.descrip": "## Page setup\nGcExcel - Java allows users to paginate each worksheet using the properties of the IPageSetup interface.\n\nYou can customize the page size, print area, print title rows, print title columns; specify horizontal page breaks, vertical page breaks, the maximum number of pages for horizontal and vertical pagination etc. along with zoom and scale factors as per your preferences while exporting a spreadsheet to a PDF file.",
  "pdfpagesetup.name": "Page setup",
  "convertexceltopdf.name": "Convert Excel file to PDF",
  "saveborder.name": "Export borders",
  "saveconditionalformatting.name": "Export conditional formatting",
  "savetable.name": "Export table",
  "financialkpis.name": "Financial KPIs",
  "incomestatement.name": "Income statement",
  "annualfinancialreport.name": "Annual financial report",
  "agingreport.name": "Aging Report",
  "text.descrip": "## Export text\nVarious of text effect can be exported to pdf file, such as:\n- Text with Excel number formatter\n- Overflow text\n- Font effects: text alignment, wordwrap, text indent, shrink to fit, underline, strikethrough .etc",
  "cellinfo.name": "Use CellInfo helper class",
  "customfunctions.descrip":"## Custom Function\nGcExcel provides you with the ability to create your own custom functions, allowing you to easily create any custom arithmetic logic you may need.",
  "customfunctions.name":"Custom Function",
  "myaddfunction.name":	"MyAddFunction",
  "myconcatenatefunction.name":"MyConcatenateFunction",
  "myconditionalsumfunction.name":"MyConditionalSumFunction",
  "myiserrorfunction.name":"MyIsErrorFunction",
  "myismergedrangefunction.name":"MyIsMergedRangeFunction",
  "mysumfunction.name":"MySumFunction",
  "charactercelltext.name":"Use Character method",
  "addtextrun.name":"Use IRichText interface",
  "cellrichtext.name":"Cell Rich Text",
  "cellrichtext.descrip":"## Cell Rich Text\n  GcExcel provides support for applying rich text formatting in the cells of the worksheet. Examples in this folder demonstrate how to:\n - Use IRange.IRichText interface to add and format text runs in a cell.\n - Use IRange.Characters() method to format a range of characters in a cell.\n - Configure font for each text run of rich text cell.",
  "configrunfont.name":"Configure text run's font",
  "exportcellrichtext.name": "Cell rich text",
  "verticaltext.name":"Export vertical text",
  "importxlsmtoworkbook.name":"Open and save xlsm file",
  "createstylebaseon.name":"Create and modify style based on a style",
  "setbackgroundimage.name":"Set background image for worksheet",
  "loadandsavejsonwithshapes.name":"Load and save json containing shapes",
  "websiteflowchart.name":"Website flow chart",
  "setjava8datevalue.name":"Set java 8 date time value"

}